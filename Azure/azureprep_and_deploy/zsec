#!/bin/bash
set -e

usage()
{
    echo "Usage: $0 <up|destroy>"
    exit 1
}

if [ $# -ne 1 ] ; then
    usage
else
    case $1 in
      up|destroy|do)
          oper=$1
      ;;
      *)
          usage
      ;;
    esac
fi

if [[ "$oper" == "up" || "destroy" ]]; then
    # shellcheck disable=SC2153
    if [ -z "$DTYPE" ]; then
      read -rp "Deployment Type: ( base | base_cc | base_cc_lb | cc_lb ) : " dtype
    else
      dtype=$DTYPE
    fi

    case $dtype in
      base|base_cc|base_cc_lb|cc_lb)
          echo "Deployment Type: ${dtype}"
      ;;
      *)
          echo "Invalid Deployment Type: ${dtype}"
          exit 1
      ;;
    esac
fi

tversion=0.13.7
echo "Detecting OS..."
if [[ "$OSTYPE" == "linux"* ]]; then
    os_str=linux
    arch=amd64
    ostype=Linux
elif [[ "$OSTYPE" == "darwin"* ]]; then
    os_str=darwin
    arch=amd64
    ostype=MacOS
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    os_str=freebsd
    arch=amd64
    ostype=FreeBSD
    echo "FreeBSD support coming soon..."
    exit 1
else
    echo "Unsupported OS: $OSTYPE"
    exit 1
fi
echo "OS is $ostype"

dir=bin
echo "Creating a local $dir directory if not present..."
if [[ ! -e $dir ]]; then
    mkdir $dir
elif [[ ! -d $dir ]]; then
    echo "$dir already exists but is not a directory" 1>&2
    exit 1
fi

echo "Checking Azure Environment Variables..."
# if .zsecrc is not present we'll assume that Azure env was never set
if [[ ! -e ./.zsecrc ]]; then
    read -p "Enter Azure Subcription Id: " azure_subscription_id
    read -p "Enter Application (client) ID: " azure_client_id
    read -p "Enter Directory (tenant) ID: " azure_tenant_id
    read -p "Enter Client Secret Value: " azure_client_secret
    read -p "Enter Azure Region: " azure_location
    echo "export ARM_CLIENT_ID=${azure_client_id}" > .zsecrc
    echo "export ARM_CLIENT_SECRET=${azure_client_secret}" >> .zsecrc
    echo "export ARM_SUBSCRIPTION_ID=${azure_subscription_id}" >> .zsecrc
    echo "export ARM_TENANT_ID=${azure_tenant_id}" >> .zsecrc
    echo "export TF_VAR_ARM_LOCATION=${azure_location}" >> .zsecrc
fi

# add local bin directory to PATH
if ! grep -Fxq "export PATH=\${PATH}:\${PWD}/bin" .zsecrc; then
    echo 'export PATH=${PATH}:${PWD}/bin' >> .zsecrc
fi
. ./.zsecrc

if [ -z "$ARM_CLIENT_ID" ] || [ -z "$ARM_CLIENT_SECRET" ] || [ -z "$ARM_SUBSCRIPTION_ID" ] || [ -z "$ARM_TENANT_ID" ] || [ -z "$TF_VAR_ARM_LOCATION" ]; then
    echo "Azure Access info is missing. Remove .zsecrc file and rerun $0 $1"
    exit 1
fi

echo "Download terraform binary for $ostype if not present..."
if [[ ! -e ./$dir/terraform ]]; then
    curl -o ./$dir/terraform_${tversion}_${arch}.zip https://releases.hashicorp.com/terraform/$tversion/terraform_${tversion}_${os_str}_${arch}.zip
    unzip ./$dir/terraform_${tversion}_${arch}.zip -d ./$dir
    rm -f ./$dir/terraform_${tversion}_${arch}.zip
fi

if [[ "$oper" == "do" ]]; then
    exit 1
fi

if [[ "$oper" == "up" ]]; then
    echo "Bringing up Cloud Connector cluster..."
    ./$dir/terraform init tfdir/$dtype
    if [[ "$AUTO_APPROVE" ]]; then
        ./$dir/terraform apply -auto-approve -var arm_location=$TF_VAR_ARM_LOCATION tfdir/$dtype
    else
        ./$dir/terraform apply -var arm_location=$TF_VAR_ARM_LOCATION tfdir/$dtype
    fi

elif [[ "$oper" == "destroy" ]]; then
    echo "Destroying Cloud Connector cluster..."
    ./$dir/terraform init tfdir/$dtype
    if [[ "$AUTO_APPROVE" ]]; then
        ./$dir/terraform destroy -auto-approve -var arm_location=$TF_VAR_ARM_LOCATION tfdir/$dtype
    else
      ./$dir/terraform destroy -var arm_location=$TF_VAR_ARM_LOCATION tfdir/$dtype
    fi
    rm -rf bin .terraform terraform.tfstate*
    rm -f *.pem && rm -f *.pem.pub
    rm -f name_prefix random_string
    rm -rf user.key user.crt
    rm -rf systems.json setup-*.tar
fi